#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ── (선택) Qt 로그 간소화 ────────────────────────────────────────────────
import os
os.environ["QT_LOGGING_RULES"] = "*.debug=false;*.info=false;qt.qpa.*=false"
# ───────────────────────────────────────────────────────────────────────

from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
    QPushButton, QGroupBox, QTextEdit, QLabel
)
from PyQt6.QtGui import QPalette, QColor, QImage, QPixmap
from PyQt6.QtCore import Qt, QTimer, qInstallMessageHandler, QObject, pyqtSignal  # ★ QObject, pyqtSignal
qInstallMessageHandler(lambda *args: None)  # Qt 메시지 무음 (원치 않으면 주석)

import sys
from datetime import datetime
import math
import urllib.request
import threading, time  # ← MJPEG 리더 스레드용
import socket  # ← UDP

# ===== ROS2 =====
import rclpy
from rclpy.node import Node
from rclpy.qos import QoSPresetProfiles
from std_msgs.msg import String, Bool, Int32
from geometry_msgs.msg import PoseStamped
from sensor_msgs.msg import Image
from cv_bridge import CvBridge

# ===== 비디오/포즈 토픽 설정 =====
IMAGE_TOPICS = {
    "Global":   "/marker/debug_image",                 # ← ROS Image 토픽
    "Pinky-1":  "http://192.168.247.64:9817/video_feed",  # ← MJPEG (HTTP)
    "Pinky-2":  "http://192.168.247.101:9818/video_feed", # ← MJPEG (HTTP)
    "Pinky-3":  "http://192.168.247.178:9819/video_feed", # ← MJPEG (HTTP)
}
POSE_TOPICS = {
    "Pinky-1": "/marker_map/ID25",
    "Pinky-2": "/marker_map/ID26",
    "Pinky-3": "/marker_map/ID27",
}
CELL_W, CELL_H = 640, 360

# 로봇팔 웹 스트림(MJPEG) 주소 - Flask의 /video_feed
JETCOBOT_STREAM_URL = "http://192.168.247.164:9816/video_feed"

# UDP 수신 포트
UDP_PORT = 9999


# ───────────────────────────────────────────────────────────────────────
# 지연 제거용 MJPEG 리더: 큰 청크로 연속 읽기 + 최신 프레임만 유지
# ───────────────────────────────────────────────────────────────────────
class MjpegReader:
    """MJPEG 스트림을 빠르게 읽어 최신 프레임(jpg bytes)만 콜백으로 전달"""
    def __init__(self, url: str, on_frame_bytes):
        self.url = url
        self.on_frame_bytes = on_frame_bytes
        self._buf = bytearray()
        self._stop = False
        self._thr = threading.Thread(target=self._run, daemon=True)
        self._thr.start()

    def stop(self):
        self._stop = True

    def _run(self):
        conn = None
        while not self._stop:
            try:
                req = urllib.request.Request(self.url, headers={'User-Agent': 'Mozilla/5.0'})
                conn = urllib.request.urlopen(req, timeout=3.0)
                # 연속 읽기: 큰 청크(64KB)로 빠르게 읽음 → 버퍼 적체 방지
                while not self._stop:
                    chunk = conn.read(65536)  # 64KB
                    if not chunk:
                        break
                    self._buf += chunk

                    # JPEG 프레임 분리 (SOI/EOI)
                    while True:
                        soi = self._buf.find(b'\xff\xd8')  # Start Of Image
                        if soi < 0:
                            # 오래된 쓰레기 누적 방지
                            if len(self._buf) > 2_000_000:
                                del self._buf[:-2]
                            break
                        eoi = self._buf.find(b'\xff\xd9', soi + 2)  # End Of Image
                        if eoi < 0:
                            if soi > 1_000_000:
                                del self._buf[:soi]
                            break
                        jpg = bytes(self._buf[soi:eoi+2])
                        del self._buf[:eoi+2]
                        # 최신 프레임만 즉시 전달
                        self.on_frame_bytes(jpg)

                    # 버퍼가 과도하게 커지면 최신 1MB만 유지
                    if len(self._buf) > 3_000_000:
                        self._buf = self._buf[-1_000_000:]

            except Exception:
                time.sleep(0.3)  # 잠시 후 재연결
            finally:
                try:
                    if conn:
                        conn.close()
                except Exception:
                    pass
                conn = None


# UDP 수신기 (알림 패널로 보냄)
class UdpNotifyReceiver(QObject):
    received = pyqtSignal(str)

    def __init__(self, port=UDP_PORT, parent=None):
        super().__init__(parent)
        self._sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self._sock.bind(("", port))  # 모든 인터페이스 수신
        self._thr = threading.Thread(target=self._run, daemon=True)

    def start(self):
        self._thr.start()

    def _run(self):
        while True:
            try:
                data, addr = self._sock.recvfrom(8192)
                msg = data.decode("utf-8", "ignore")
                self.received.emit(msg)
            except Exception:
                continue


class RosBridge(Node):
    """ROS2 퍼블리셔/구독자 + 최신 상태 보관 (멀티 카메라 & 3대 포즈 + Bool 명령 전용)"""
    def __init__(self, image_topics: dict[str, str], pose_topics: dict[str, str]):
        super().__init__('delivery_robot_gui')

        # --- 상태 버퍼 ---
        self.bridge = CvBridge()
        self.latest_qimages: dict[str, QImage | None] = {name: None for name in image_topics.keys()}
        self.latest_poses: dict[str, tuple[float, float, float] | None] = {name: None for name in pose_topics.keys()}

        # --- (1) 멀티 카메라 구독자 ---
        self.image_subs = {}
        for name, topic in image_topics.items():
            # ✅ ROS 토픽만 구독 (HTTP는 GUI에서 MJPEG 처리)
            if isinstance(topic, str) and topic.startswith('/'):
                self.image_subs[name] = self.create_subscription(
                    Image, topic, self._make_img_cb(name),
                    QoSPresetProfiles.SENSOR_DATA.value
                )
            else:
                pass  # HTTP는 GUI 측 MjpegReader 사용

        # --- (2) 다중 포즈 구독자 ---
        self.pose_subs = {}
        for name, topic in pose_topics.items():
            self.pose_subs[name] = self.create_subscription(
                PoseStamped, topic, self._make_pose_cb(name), 10
            )

        # --- (3) 공통 알림/로그 구독 (UDP 사용으로 /alerts 구독 제거) ---
        self.pub_log   = self.create_publisher(String, '/gui/log', 10)

        # --- (4) ✅ Pinky1/2/3 전용 Bool 명령 ---
        # Pinky1
        self.pub_p1_kitchen = self.create_publisher(Bool, '/pinky1/go_to_kitchen', 10)
        self.pub_p1_serving = self.create_publisher(Bool, '/pinky1/go_to_serving', 10)
        self.pub_p1_charge  = self.create_publisher(Bool, '/pinky1/go_to_charge', 10)
        self.pub_p1_room    = self.create_publisher(Bool, '/pinky1/go_to_room', 10)
        self.pub_p1_recall  = self.create_publisher(Bool, '/pinky1/go_to_recall', 10)
        self.pub_p1_return  = self.create_publisher(Bool, '/pinky1/go_to_return', 10)
        self.pub_p1_stop    = self.create_publisher(Bool, '/pinky1/stop', 10)

        # Pinky2
        self.pub_p2_kitchen = self.create_publisher(Bool, '/pinky2/go_to_kitchen', 10)
        self.pub_p2_serving = self.create_publisher(Bool, '/pinky2/go_to_serving', 10)
        self.pub_p2_charge  = self.create_publisher(Bool, '/pinky2/go_to_charge', 10)
        self.pub_p2_room    = self.create_publisher(Bool, '/pinky2/go_to_room', 10)
        self.pub_p2_recall  = self.create_publisher(Bool, '/pinky2/go_to_recall', 10)
        self.pub_p2_return  = self.create_publisher(Bool, '/pinky2/go_to_return', 10)
        self.pub_p2_stop    = self.create_publisher(Bool, '/pinky2/stop', 10)

        # Pinky3
        self.pub_p3_kitchen = self.create_publisher(Bool, '/pinky3/go_to_kitchen', 10)
        self.pub_p3_serving = self.create_publisher(Bool, '/pinky3/go_to_serving', 10)
        self.pub_p3_charge  = self.create_publisher(Bool, '/pinky3/go_to_charge', 10)
        self.pub_p3_room    = self.create_publisher(Bool, '/pinky3/go_to_room', 10)
        self.pub_p3_recall  = self.create_publisher(Bool, '/pinky3/go_to_recall', 10)
        self.pub_p3_return  = self.create_publisher(Bool, '/pinky3/go_to_return', 10)
        self.pub_p3_stop    = self.create_publisher(Bool, '/pinky3/stop', 10)

        # GUI 콜백 훅
        self.gui_append_log = None
        self.gui_append_alert = None
        self.gui_set_pose_text = None

        # Coordinator 로그 구독 (원본 유지)
        self.sub_coord_log = self.create_subscription(String, '/coordinator/gui_log', self._cb_coord_log, 10)

    # ===== 콜백들 =====
    def _make_img_cb(self, name: str):
        def _cb(msg: Image):
            try:
                cv_bgr = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
                cv_rgb = cv_bgr[:, :, ::-1]
                h, w = cv_rgb.shape[:2]
                bytes_per_line = w * 3
                qimg = QImage(cv_rgb.tobytes(), w, h, bytes_per_line, QImage.Format.Format_RGB888).copy()
                self.latest_qimages[name] = qimg
            except Exception as e:
                self._log_gui(f"[{name}] cv_bridge 변환 실패: {e}")
        return _cb

    def _make_pose_cb(self, name: str):
        def _cb(msg: PoseStamped):
            x = msg.pose.position.x
            y = msg.pose.position.y
            z = msg.pose.orientation.z
            w = msg.pose.orientation.w
            yaw = 2.0 * math.atan2(z, w)
            yaw_deg = math.degrees(yaw)
            self.latest_poses[name] = (x, y, yaw_deg)
            if self.gui_set_pose_text:
                # 문자열 인자는 호환성용으로 넘기지만, 실제 UI는 GUI에서 latest_poses를 읽어 갱신
                text = " | ".join(
                    f"{n}: x={p[0]:.2f}, y={p[1]:.2f}, yaw={p[2]:.1f}°"
                    for n, p in self.latest_poses.items() if p is not None
                )
                self.gui_set_pose_text(text if text else "현재 위치: -")
        return _cb

    def _cb_alert(self, msg: String):
        self._alert_gui(msg.data)

    # ===== GUI 훅 =====
    def set_callbacks(self, append_log, append_alert, set_pose_text, append_coord_log):
        self.gui_append_log = append_log
        self.gui_append_alert = append_alert
        self.gui_set_pose_text = set_pose_text
        self.gui_append_coord_log = append_coord_log

    # ===== 유틸 =====
    def _log_gui(self, text: str):
        if self.gui_append_log:
            self.gui_append_log(text)
        self.pub_log.publish(String(data=text))

    def _alert_gui(self, text: str):
        if self.gui_append_alert:
            self.gui_append_alert(text)

    # ===== ✅ Pinky1/2/3 전용 Bool 명령 =====
    def _send_goal(self, robot: int, goal_name: str):
        table = {
            1: {"kitchen": self.pub_p1_kitchen, "serving": self.pub_p1_serving, "charge": self.pub_p1_charge,
                "room": self.pub_p1_room, "recall": self.pub_p1_recall, "return": self.pub_p1_return},
            2: {"kitchen": self.pub_p2_kitchen, "serving": self.pub_p2_serving, "charge": self.pub_p2_charge,
                "room": self.pub_p2_room, "recall": self.pub_p2_recall, "return": self.pub_p2_return},
            3: {"kitchen": self.pub_p3_kitchen, "serving": self.pub_p3_serving, "charge": self.pub_p3_charge,
                "room": self.pub_p3_room, "recall": self.pub_p3_recall, "return": self.pub_p3_return},
        }
        pub = table.get(robot, {}).get(goal_name)
        if pub is None:
            self._log_gui(f"[Pinky{robot}] 알 수 없는 목표: {goal_name}")
            return
        pub.publish(Bool(data=True))
        self._log_gui(f"[Pinky{robot}] /pinky{robot}/go_to_{goal_name} = True  (브릿지→/go_to_{goal_name})")

    def _send_stop(self, robot: int):
        pub = {1: self.pub_p1_stop, 2: self.pub_p2_stop, 3: self.pub_p3_stop}.get(robot)
        if pub is None:
            self._log_gui(f"[Pinky{robot}] STOP 퍼블리셔 없음")
            return
        pub.publish(Bool(data=True))
        self._log_gui(f"[Pinky{robot}] /pinky{robot}/stop = True  (브릿지→/stop)")

    def _cb_coord_log(self, msg: String):
        if hasattr(self, "gui_append_coord_log") and self.gui_append_coord_log:
            self.gui_append_coord_log(msg.data)

    def send_p1_goal(self, goal_name: str): self._send_goal(1, goal_name)
    def send_p2_goal(self, goal_name: str): self._send_goal(2, goal_name)
    def send_p3_goal(self, goal_name: str): self._send_goal(3, goal_name)
    def send_p1_stop(self): self._send_stop(1)
    def send_p2_stop(self): self._send_stop(2)
    def send_p3_stop(self): self._send_stop(3)


class GUI(QMainWindow):
    def __init__(self, ros: RosBridge, image_topics: dict[str, str]):
        super().__init__()
        self.ros = ros
        self.image_names = list(image_topics.keys())
        self.image_topics = image_topics  # 보관

        self.setWindowTitle("양로원 식사 배달 로봇 제어 (ROS2 토픽 전용)")
        self.showMaximized()

        # 팔레트
        palette = QPalette()
        palette.setColor(QPalette.ColorRole.Window, QColor("#FFF2CC"))
        palette.setColor(QPalette.ColorRole.WindowText, QColor("#647687"))
        palette.setColor(QPalette.ColorRole.Button, QColor("#E1D5E7"))
        palette.setColor(QPalette.ColorRole.ButtonText, QColor("#647687"))
        palette.setColor(QPalette.ColorRole.Base, QColor("#FFF2CC"))
        palette.setColor(QPalette.ColorRole.Text, QColor("#647687"))
        self.setPalette(palette)

        # 메인 레이아웃
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        main_layout = QHBoxLayout(main_widget)
        main_layout.setContentsMargins(15, 15, 15, 15)
        main_layout.setSpacing(15)

        # 좌측: 2x2 영상 + 다중 포즈 상태
        left_widget = QWidget()
        left_widget.setStyleSheet("background-color: #BAC8D3; border-radius: 10px; padding: 15px; border: 2px solid #647687;")
        left_layout = QGridLayout(left_widget)
        left_layout.setSpacing(8)

        # ✅ JetCobot 영상: GroupBox 포함
        jet_group = QGroupBox("JetCobot MJPEG 스트리밍")
        jet_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px;")
        jet_layout = QVBoxLayout(jet_group)

        self.image_jetcobot = QLabel("JetCobot 대기중…")
        self.image_jetcobot.setStyleSheet("background-color: #FFF2CC; border: 2px solid #647687; border-radius: 6px; color: #647687;")
        self.image_jetcobot.setFixedSize(CELL_W, CELL_H)
        self.image_jetcobot.setAlignment(Qt.AlignmentFlag.AlignCenter)
        jet_layout.addWidget(self.image_jetcobot)
        left_layout.addWidget(jet_group, 2, 1)

        # ✅ 현재 위치 (3대 표시)  ←←← 변경된 부분
        pose_group = QGroupBox("현재 위치 (ID25~27)")
        pose_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px;")
        pose_layout = QVBoxLayout(pose_group)

        def make_row(title):
            row = QLabel(f"{title}: 미감지")
            row.setStyleSheet(
                "background:#FFF2CC; border:1px solid #647687; border-radius:6px;"
                "padding:6px; color:#374151; font-size:16px;"
            )
            row.setMinimumHeight(32)
            row.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignVCenter)
            return row

        self.pose_p1 = make_row("Pinky-1")
        self.pose_p2 = make_row("Pinky-2")
        self.pose_p3 = make_row("Pinky-3")

        pose_layout.addWidget(self.pose_p1)
        pose_layout.addWidget(self.pose_p2)
        pose_layout.addWidget(self.pose_p3)

        left_layout.addWidget(pose_group, 2, 0)

        # ── JetCobot MJPEG 저지연 리더 시작
        self._jet_last_img: QImage | None = None
        self._jet_reader = MjpegReader(JETCOBOT_STREAM_URL, self._on_jet_jpeg)

        # ── Pinky-1/2/3용 MJPEG 리더들 추가 (HTTP만 선택)
        self._mjpeg_last_imgs: dict[str, QImage | None] = {}
        self._mjpeg_readers: dict[str, MjpegReader] = {}
        for name, topic in self.image_topics.items():
            if isinstance(topic, str) and topic.startswith("http"):
                self._mjpeg_last_imgs[name] = None
                self._mjpeg_readers[name] = MjpegReader(topic, lambda jpg, n=name: self._on_mjpeg_jpeg(n, jpg))

        # ROS 스핀 타이머
        self.timer = QTimer()
        self.timer.timeout.connect(self._on_timer)
        self.timer.start(33)  # ~30fps 갱신

        # ROS ↔ GUI 콜백 연동 (포즈 UI 갱신 함수로 연결)  ←←← 변경된 부분
        self.ros.set_callbacks(
            append_log=self.log_action,
            append_alert=self.alert_action,
            set_pose_text=self._update_pose_ui,
            append_coord_log=self.append_coord_log
        )

        main_layout.addWidget(left_widget, stretch=1)

        # 우측: 알림/제어/로그
        right_widget = QWidget()
        right_widget.setStyleSheet("background-color: #BAC8D3; border-radius: 10px; padding: 15px; border: 2px solid #647687;")
        right_layout = QVBoxLayout(right_widget)
        right_layout.setSpacing(15)

        # 알림 (UDP)
        alert_group = QGroupBox("알림 (UDP)")
        alert_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 18px;")
        alert_layout = QVBoxLayout(alert_group)
        self.alert_text = QTextEdit()
        self.alert_text.setReadOnly(True)
        self.alert_text.setStyleSheet("background-color: #FFF2CC; border: 2px solid #647687; border-radius: 6px;")
        alert_layout.addWidget(self.alert_text)

        # 제어 (Pinky 3대용 버튼)
        ctrl_group = QGroupBox("로봇 제어 (브릿지 Bool 토픽)")
        ctrl_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 18px;")
        ctrl_layout = QGridLayout(ctrl_group)

        bool_cmds = [
            ("주방", "kitchen"),
            ("배식대", "serving"),
            ("충전소", "charge"),
            ("방", "room"),
            ("리콜", "recall"),
            ("복귀", "return"),
        ]
        base_row = 0
        for i, (label, goal) in enumerate(bool_cmds):
            btn = QPushButton(f"Pinky1: {label}")
            btn.setStyleSheet("background-color: #E1D5E7; border-radius: 6px; padding: 10px; font-size: 16px; border: 1px solid #647687;")
            btn.clicked.connect(lambda _, g=goal: self.ros.send_p1_goal(g))
            ctrl_layout.addWidget(btn, base_row + i, 2)
        btn_p1_stop = QPushButton("Pinky1: STOP")
        btn_p1_stop.setStyleSheet("background-color: #ffdddd; border-radius: 6px; padding: 10px; font-size: 16px; border: 2px solid #aa0000;")
        btn_p1_stop.clicked.connect(lambda _: self.ros.send_p1_stop())
        ctrl_layout.addWidget(btn_p1_stop, base_row + len(bool_cmds), 2)

        for i, (label, goal) in enumerate(bool_cmds):
            btn = QPushButton(f"Pinky2: {label}")
            btn.setStyleSheet("background-color: #E1D5E7; border-radius: 6px; padding: 10px; font-size: 16px; border: 1px solid #647687;")
            btn.clicked.connect(lambda _, g=goal: self.ros.send_p2_goal(g))
            ctrl_layout.addWidget(btn, base_row + i, 3)
        btn_p2_stop = QPushButton("Pinky2: STOP")
        btn_p2_stop.setStyleSheet("background-color: #ffdddd; border-radius: 6px; padding: 10px; font-size: 16px; border: 2px solid #aa0000;")
        btn_p2_stop.clicked.connect(lambda _: self.ros.send_p2_stop())
        ctrl_layout.addWidget(btn_p2_stop, base_row + len(bool_cmds), 3)

        for i, (label, goal) in enumerate(bool_cmds):
            btn = QPushButton(f"Pinky3: {label}")
            btn.setStyleSheet("background-color: #E1D5E7; border-radius: 6px; padding: 10px; font-size: 16px; border: 1px solid #647687;")
            btn.clicked.connect(lambda _, g=goal: self.ros.send_p3_goal(g))
            ctrl_layout.addWidget(btn, base_row + i, 4)
        btn_p3_stop = QPushButton("Pinky3: STOP")
        btn_p3_stop.setStyleSheet("background-color: #ffdddd; border-radius: 6px; padding: 10px; font-size: 16px; border: 2px solid #aa0000;")
        btn_p3_stop.clicked.connect(lambda _: self.ros.send_p3_stop())
        ctrl_layout.addWidget(btn_p3_stop, base_row + len(bool_cmds), 4)

        # Coordinator 제어
        coordinator_box = QGroupBox("Coordinator 제어")
        coordinator_box.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 18px;")
        coordinator_layout = QHBoxLayout(coordinator_box)
        coordinator_layout.setSpacing(10)
        coordinator_layout.setContentsMargins(10, 10, 10, 10)

        self.coordinator_pub = self.ros.create_publisher(Int32, '/coordinator/command', 10)

        def add_coord_btn(label: str, cmd: int):
            btn = QPushButton(label)
            btn.setMinimumHeight(45)
            btn.setStyleSheet("background-color: #D5E8D4; border-radius: 6px; padding: 10px; font-size: 16px; border: 1px solid #647687;")
            btn.clicked.connect(lambda _, c=cmd: self.coordinator_pub.publish(Int32(data=c)))
            coordinator_layout.addWidget(btn)

        add_coord_btn("식판 적재", 1)
        add_coord_btn("식판 회수", 2)
        add_coord_btn("일시정지", 3)
        add_coord_btn("초기화", 4)

        # 작업 로그
        log_group = QGroupBox("작업 로그 (/gui/log)")
        log_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 18px;")
        log_layout = QVBoxLayout(log_group)
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setStyleSheet("background-color: #FFF2CC; border: 2px solid #647687; border-radius: 6px;")
        log_layout.addWidget(self.log_text)

        # Coordinator 로그
        coord_log_group = QGroupBox("Coordinator 로그 (/coordinator/gui_log)")
        coord_log_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 18px;")
        coord_log_layout = QVBoxLayout(coord_log_group)
        self.coord_log_text = QTextEdit()
        self.coord_log_text.setReadOnly(True)
        self.coord_log_text.setStyleSheet("background-color: #FFF2CC; border: 2px solid #647687; border-radius: 6px;")
        coord_log_layout.addWidget(self.coord_log_text)

        # ==== 영상 QLabel들 추가 (QGroupBox로 감싸기) ====
        self.video_labels = {}
        for i, name in enumerate(self.image_names):
            group = QGroupBox(f"{name} ({image_topics[name]})")
            group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 8px; font-size: 14px;")
            group_layout = QVBoxLayout(group)

            label = QLabel(f"{name} 대기중…")
            label.setStyleSheet("background-color: #FFF2CC; border: 2px solid #647687; border-radius: 6px; color: #647687;")
            label.setFixedSize(CELL_W, CELL_H)
            label.setAlignment(Qt.AlignmentFlag.AlignCenter)

            group_layout.addWidget(label)

            row, col = divmod(i, 2)
            left_layout.addWidget(group, row, col)

            self.video_labels[name] = label

        # 우측 위젯에 추가
        right_layout.addWidget(alert_group)       # ← 알림 패널 (UDP 수신 표시)
        right_layout.addWidget(ctrl_group)
        right_layout.addWidget(coordinator_box)
        right_layout.addWidget(log_group)
        right_layout.addWidget(coord_log_group)
        right_layout.addStretch()
        main_layout.addWidget(right_widget, stretch=1)

        self.log_action("GUI 시작. 다중 카메라/포즈 구독; /pinkyN/go_to_*, /pinkyN/stop 퍼블리시")

        # UDP 수신 시작 → 알림 패널에 표시
        self._udp_rx = UdpNotifyReceiver(port=UDP_PORT)
        self._udp_rx.received.connect(self.alert_action)
        self._udp_rx.start()

    # ── MJPEG 프레임 수신 콜백(스레드 → GUI 변수 저장)
    def _on_jet_jpeg(self, jpg: bytes):
        img = QImage.fromData(jpg)
        if not img.isNull():
            self._jet_last_img = img  # 그리기는 _on_timer에서

    def _on_mjpeg_jpeg(self, name: str, jpg: bytes):
        img = QImage.fromData(jpg)
        if not img.isNull():
            self._mjpeg_last_imgs[name] = img

    # ── ROS 스핀 & 이미지 표시
    def _on_timer(self):
        rclpy.spin_once(self.ros, timeout_sec=0.0)

        # JetCobot 최신 프레임 그리기
        if self._jet_last_img is not None:
            pix = QPixmap.fromImage(
                self._jet_last_img.scaled(
                    self.image_jetcobot.width(),
                    self.image_jetcobot.height(),
                    Qt.AspectRatioMode.KeepAspectRatio
                )
            )
            self.image_jetcobot.setPixmap(pix)

        # 각 패널별로 ROS 이미지 또는 MJPEG 이미지를 표시 (둘 중 가능한 것)
        for name in self.image_names:
            lbl = self.video_labels.get(name)
            if not lbl:
                continue

            frame_qimg = None
            # 우선순위: MJPEG(HTTP) → ROS 이미지
            if name in self._mjpeg_last_imgs and self._mjpeg_last_imgs[name] is not None:
                frame_qimg = self._mjpeg_last_imgs[name]
            elif self.ros.latest_qimages.get(name) is not None:
                frame_qimg = self.ros.latest_qimages[name]

            if frame_qimg is not None:
                pix = QPixmap.fromImage(frame_qimg.scaled(CELL_W, CELL_H, Qt.AspectRatioMode.KeepAspectRatio))
                lbl.setPixmap(pix)

    # ── 로그/알림 UI 업데이트
    def append_coord_log(self, message: str):
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.coord_log_text.append(f"[Coordinator] [{ts}] {message}")

    def log_action(self, message: str):
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.log_text.append(f"[{ts}] {message}")

    def alert_action(self, message: str):
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.alert_text.append(f"[{ts}] {message}")

    # ←←← 추가: 포즈 UI 3줄 갱신 함수 (RosBridge에서 호출)
    def _update_pose_ui(self, _incoming_text: str):
        def fmt(p):
            return f"x={p[0]:.2f}, y={p[1]:.2f}, yaw={p[2]:.1f}°"
        p1 = self.ros.latest_poses.get("Pinky-1")
        p2 = self.ros.latest_poses.get("Pinky-2")
        p3 = self.ros.latest_poses.get("Pinky-3")
        self.pose_p1.setText(f"Pinky-1: {fmt(p1)}" if p1 else "Pinky-1: 미감지")
        self.pose_p2.setText(f"Pinky-2: {fmt(p2)}" if p2 else "Pinky-2: 미감지")
        self.pose_p3.setText(f"Pinky-3: {fmt(p3)}" if p3 else "Pinky-3: 미감지")

    # ── 창 종료 처리
    def closeEvent(self, event):
        try:
            # 모든 MJPEG 리더 정리
            if hasattr(self, "_mjpeg_readers"):
                for r in self._mjpeg_readers.values():
                    try:
                        r.stop()
                    except Exception:
                        pass
            if hasattr(self, "_jet_reader") and self._jet_reader:
                self._jet_reader.stop()
            self.ros.destroy_node()
            rclpy.shutdown()
        except Exception:
            pass
        super().closeEvent(event)


def main():
    rclpy.init(args=None)
    ros = RosBridge(IMAGE_TOPICS, POSE_TOPICS)
    app = QApplication(sys.argv)
    w = GUI(ros, IMAGE_TOPICS)
    w.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    main()
