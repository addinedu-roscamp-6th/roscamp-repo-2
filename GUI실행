#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
    QPushButton, QGroupBox, QTextEdit, QLabel
)
from PyQt6.QtGui import QPalette, QColor, QImage, QPixmap
from PyQt6.QtCore import Qt, QTimer
import sys
from datetime import datetime
import math

# ===== ROS2 =====
import rclpy
from rclpy.node import Node
from rclpy.qos import QoSPresetProfiles
from std_msgs.msg import String
from geometry_msgs.msg import PoseStamped
from sensor_msgs.msg import Image
from cv_bridge import CvBridge

# ===== 원하는 카메라 토픽 이름만 여기서 바꾸면 됩니다 =====
IMAGE_TOPICS = {
    "Global":   "/marker/debug_image",        # 기존 전역/디버그 영상
    "Pinky-1":  "/pinky1/camera/image_raw",   # 예시
    "Pinky-2":  "/pinky2/camera/image_raw",   # 예시
    "JetCobot": "/jetcobot/camera/image_raw"  # 예시
}
# 셀 크기 (2x2 그리드에 맞춰 적당히)
CELL_W, CELL_H = 640, 360


class RosBridge(Node):
    """ROS2 퍼블리셔/구독자 + 최신 상태 보관 (멀티 카메라 지원)"""
    def __init__(self, image_topics: dict[str, str]):
        super().__init__('delivery_robot_gui')

        # --- 상태 버퍼 ---
        self.bridge = CvBridge()
        self.latest_qimages: dict[str, QImage] = {}   # {name: QImage}
        self.latest_pose = None                       # (x, y, yaw_deg)

        # --- (1) 멀티 카메라 구독자 동적 생성 ---
        self.image_subs = {}
        for name, topic in image_topics.items():
            sub = self.create_subscription(
                Image, topic,
                self._make_img_cb(name),
                QoSPresetProfiles.SENSOR_DATA.value
            )
            self.image_subs[name] = sub
            self.latest_qimages[name] = None

        # --- (2) 위치/자세, 알림 구독 ---
        self.sub_pose = self.create_subscription(
            PoseStamped, '/marker_map/ID25', self._cb_pose, 10
        )
        self.sub_alert = self.create_subscription(
            String, '/alerts', self._cb_alert, 10
        )

        # --- (3) 퍼블리셔 ---
        self.pub_log = self.create_publisher(String, '/gui/log', 10)
        self.pub_pinky1 = self.create_publisher(String, '/pinky1/cmd', 10)
        self.pub_pinky2 = self.create_publisher(String, '/pinky2/cmd', 10)
        self.pub_pinky3 = self.create_publisher(String, '/pinky3/cmd', 10)
        self.pub_jetcobot = self.create_publisher(String, '/jetcobot/cmd', 10)

        # GUI 콜백 훅
        self.gui_append_log = None
        self.gui_append_alert = None
        self.gui_set_pose_text = None

    # ===== 이미지 콜백 생성기 =====
    def _make_img_cb(self, name: str):
        def _cb_image(msg: Image):
            try:
                cv_bgr = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
                cv_rgb = cv_bgr[:, :, ::-1]  # BGR -> RGB
                h, w = cv_rgb.shape[:2]
                bytes_per_line = w * 3
                qimg = QImage(cv_rgb.tobytes(), w, h, bytes_per_line, QImage.Format.Format_RGB888).copy()
                self.latest_qimages[name] = qimg
            except Exception as e:
                self._log_gui(f"[{name}] cv_bridge 변환 실패: {e}")
        return _cb_image

    # ===== 기타 콜백 =====
    def _cb_pose(self, msg: PoseStamped):
        x = msg.pose.position.x
        y = msg.pose.position.y
        z = msg.pose.orientation.z
        w = msg.pose.orientation.w
        yaw = 2.0 * math.atan2(z, w)
        yaw_deg = math.degrees(yaw)
        self.latest_pose = (x, y, yaw_deg)
        if self.gui_set_pose_text:
            self.gui_set_pose_text(f"x={x:.2f}, y={y:.2f}, yaw={yaw_deg:.1f}°")

    def _cb_alert(self, msg: String):
        self._alert_gui(msg.data)

    # ===== GUI 훅 =====
    def set_callbacks(self, append_log, append_alert, set_pose_text):
        self.gui_append_log = append_log
        self.gui_append_alert = append_alert
        self.gui_set_pose_text = set_pose_text

    # ===== 유틸 =====
    def _log_gui(self, text: str):
        if self.gui_append_log:
            self.gui_append_log(text)
        self.pub_log.publish(String(data=text))

    def _alert_gui(self, text: str):
        if self.gui_append_alert:
            self.gui_append_alert(text)

    def send_pinky_cmd(self, idx: int, cmd: str):
        pub = {1: self.pub_pinky1, 2: self.pub_pinky2, 3: self.pub_pinky3}.get(idx)
        if not pub:
            self._log_gui(f"잘못된 핑키 인덱스: {idx}")
            return
        pub.publish(String(data=cmd))
        self._log_gui(f"[Pinky {idx}] {cmd}")

    def send_jetcobot_cmd(self, cmd: str):
        self.pub_jetcobot.publish(String(data=cmd))
        self._log_gui(f"[JetCobot] {cmd}")


class GUI(QMainWindow):
    def __init__(self, ros: RosBridge, image_topics: dict[str, str]):
        super().__init__()
        self.ros = ros
        self.image_names = list(image_topics.keys())  # 패널 순서 유지

        self.setWindowTitle("양로원 식사 배달 로봇 제어 (ROS2 토픽 전용)")
        self.showMaximized()

        # 팔레트
        palette = QPalette()
        palette.setColor(QPalette.ColorRole.Window, QColor("#FFF2CC"))
        palette.setColor(QPalette.ColorRole.WindowText, QColor("#647687"))
        palette.setColor(QPalette.ColorRole.Button, QColor("#E1D5E7"))
        palette.setColor(QPalette.ColorRole.ButtonText, QColor("#647687"))
        palette.setColor(QPalette.ColorRole.Base, QColor("#FFF2CC"))
        palette.setColor(QPalette.ColorRole.Text, QColor("#647687"))
        self.setPalette(palette)

        # 메인 레이아웃
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        main_layout = QHBoxLayout(main_widget)
        main_layout.setContentsMargins(15, 15, 15, 15)
        main_layout.setSpacing(15)

        # 좌측: 2x2 영상 + 상태
        left_widget = QWidget()
        left_widget.setStyleSheet("background-color: #BAC8D3; border-radius: 10px; padding: 15px; border: 2px solid #647687;")
        left_layout = QGridLayout(left_widget)
        left_layout.setSpacing(8)

        # 2x2 비디오 패널
        self.video_labels: dict[str, QLabel] = {}
        positions = [(0,0), (0,1), (1,0), (1,1)]
        for (row, col), name in zip(positions, self.image_names):
            box = QGroupBox(f"{name} ({image_topics[name]})")
            box.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 16px;")
            box_layout = QVBoxLayout(box)
            lbl = QLabel(f"{name} 대기중…")
            lbl.setStyleSheet("background-color: #FFF2CC; border: 2px solid #647687; border-radius: 6px; color: #647687;")
            lbl.setFixedSize(CELL_W, CELL_H)
            lbl.setAlignment(Qt.AlignmentFlag.AlignCenter)
            box_layout.addWidget(lbl)
            left_layout.addWidget(box, row, col)
            self.video_labels[name] = lbl

        # 현재 위치
        self.pose_label = QLabel("현재 위치: -")
        self.pose_label.setStyleSheet("color: #374151; font-size: 16px;")
        left_layout.addWidget(self.pose_label, 2, 0, 1, 2)

        main_layout.addWidget(left_widget, stretch=1)

        # 우측: 알림/제어/로그 (기존 그대로)
        right_widget = QWidget()
        right_widget.setStyleSheet("background-color: #BAC8D3; border-radius: 10px; padding: 15px; border: 2px solid #647687;")
        right_layout = QVBoxLayout(right_widget)
        right_layout.setSpacing(15)

        # 알림
        alert_group = QGroupBox("알림 (/alerts)")
        alert_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 18px;")
        alert_layout = QVBoxLayout(alert_group)
        self.alert_text = QTextEdit()
        self.alert_text.setReadOnly(True)
        self.alert_text.setStyleSheet("background-color: #FFF2CC; border: 2px solid #647687; border-radius: 6px;")
        alert_layout.addWidget(self.alert_text)

        # 제어
        ctrl_group = QGroupBox("로봇 제어 (토픽 퍼블리시)")
        ctrl_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 18px;")
        ctrl_layout = QGridLayout(ctrl_group)
        pinky_cmds = [
            ("주방으로 이동", "move_kitchen"),
            ("방으로 이동", "move_room"),
            ("위치 확인", "report_position"),
            ("충전소로 이동", "move_charge"),
            ("정지", "stop"),
            ("대기", "standby"),
        ]
        # Pinky1
        for i, (text, cmd) in enumerate(pinky_cmds):
            btn = QPushButton(f"Pinky1: {text}")
            btn.setStyleSheet("background-color: #E1D5E7; border-radius: 6px; padding: 10px; font-size: 16px; border: 1px solid #647687;")
            btn.clicked.connect(lambda _, c=cmd: self.ros.send_pinky_cmd(1, c))
            ctrl_layout.addWidget(btn, i // 2, i % 2)
        # Pinky2
        for i, (text, cmd) in enumerate(pinky_cmds):
            btn = QPushButton(f"Pinky2: {text}")
            btn.setStyleSheet("background-color: #E1D5E7; border-radius: 6px; padding: 10px; font-size: 16px; border: 1px solid #647687;")
            btn.clicked.connect(lambda _, c=cmd: self.ros.send_pinky_cmd(2, c))
            ctrl_layout.addWidget(btn, 3 + i // 2, i % 2)
        # Pinky3
        for i, (text, cmd) in enumerate(pinky_cmds):
            btn = QPushButton(f"Pinky3: {text}")
            btn.setStyleSheet("background-color: #E1D5E7; border-radius: 6px; padding: 10px; font-size: 16px; border: 1px solid #647687;")
            btn.clicked.connect(lambda _, c=cmd: self.ros.send_pinky_cmd(3, c))
            ctrl_layout.addWidget(btn, 6 + i // 2, i % 2)
        # 제트코봇
        jetcobot_cmds = [
            ("식사 적재", "load"),
            ("식사 하역", "unload"),
            ("대기", "standby"),
            ("정지", "stop"),
        ]
        for i, (text, cmd) in enumerate(jetcobot_cmds):
            btn = QPushButton(f"JetCobot: {text}")
            btn.setStyleSheet("background-color: #E1D5E7; border-radius: 6px; padding: 10px; font-size: 16px; border: 1px solid #647687;")
            btn.clicked.connect(lambda _, c=cmd: self.ros.send_jetcobot_cmd(c))
            ctrl_layout.addWidget(btn, 9 + i // 2, i % 2)

        # 로그
        log_group = QGroupBox("작업 로그 (/gui/log)")
        log_group.setStyleSheet("color: #647687; border: 2px solid #647687; border-radius: 10px; font-size: 18px;")
        log_layout = QVBoxLayout(log_group)
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setStyleSheet("background-color: #FFF2CC; border: 2px solid #647687; border-radius: 6px;")
        log_layout.addWidget(self.log_text)

        # 우측 합치기
        right_layout.addWidget(alert_group)
        right_layout.addWidget(ctrl_group)
        right_layout.addWidget(log_group)
        right_layout.addStretch()
        main_layout.addWidget(right_widget, stretch=1)

        # ROS → GUI 콜백 연결
        self.ros.set_callbacks(
            append_log=self.log_action,
            append_alert=self.alert_action,
            set_pose_text=self.pose_label.setText
        )

        # 타이머: ROS spin + 화면 갱신
        self.timer = QTimer()
        self.timer.timeout.connect(self._on_timer)
        self.timer.start(33)  # ~30fps

        self.log_action("GUI 시작. 다중 카메라 구독 및 /pinky*/cmd, /jetcobot/cmd 퍼블리시")

    # 타이머 루프
    def _on_timer(self):
        rclpy.spin_once(self.ros, timeout_sec=0.0)
        # 각 패널 업데이트
        for name, qimg in self.ros.latest_qimages.items():
            lbl = self.video_labels.get(name)
            if lbl is None:
                continue
            if qimg is None:
                # 아직 첫 프레임 미수신
                continue
            pix = QPixmap.fromImage(qimg.scaled(CELL_W, CELL_H, Qt.AspectRatioMode.KeepAspectRatio))
            lbl.setPixmap(pix)

    # 로그/알림
    def log_action(self, message: str):
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.log_text.append(f"[{ts}] {message}")

    def alert_action(self, message: str):
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.alert_text.append(f"[{ts}] {message}")

    # 종료 처리
    def closeEvent(self, event):
        try:
            self.ros.destroy_node()
            rclpy.shutdown()
        except Exception:
            pass
        super().closeEvent(event)


def main():
    rclpy.init(args=None)
    ros = RosBridge(IMAGE_TOPICS)
    app = QApplication(sys.argv)
    w = GUI(ros, IMAGE_TOPICS)
    w.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    main()
