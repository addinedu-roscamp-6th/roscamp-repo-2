#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os, time, threading, signal
import cv2
from flask import Flask, Response
from pinkylib import Camera

# ===== 설정 =====
PORT = int(os.getenv("PORT", "9819"))   # 포트 변경 원하면 환경변수 PORT로 지정
WIDTH = int(os.getenv("WIDTH", "320"))
HEIGHT = int(os.getenv("HEIGHT", "240"))
JPEG_QUALITY = int(os.getenv("JPEG_QUALITY", "80"))

# ===== 전역 상태 =====
app = Flask(__name__)
_cam = None
_latest = None
_lock = threading.Lock()
_running = True

def stop(*_args):
    """SIGINT/SIGTERM에서도 안전하게 카메라 정리."""
    global _running, _cam
    _running = False
    try:
        if _cam:
            _cam.close()
    except Exception:
        pass

def camera_loop():
    global _cam, _latest, _running
    _cam = Camera()
    _cam.start(width=WIDTH, height=HEIGHT)
    while _running:
        frame = _cam.get_frame()
        if frame is not None:
            with _lock:
                _latest = frame
        else:
            time.sleep(0.01)

@app.route("/")
def index():
    # 간단한 뷰 페이지 (MJPEG) — 올바른 엔드포인트로 수정
    return "<h2>Robot Camera</h2><img src='/video_feed'/>"

@app.route("/video")  # 하위호환(잘못된 경로로 들어와도 자동 이동)
def video_compat():
    return "<meta http-equiv='refresh' content='0; url=/video_feed'>"

@app.route("/video_feed")
def video():
    def gen():
        while _running:
            with _lock:
                frame = None if _latest is None else _latest.copy()
            if frame is None:
                time.sleep(0.01)
                continue
            ok, buf = cv2.imencode(".jpg", frame, [cv2.IMWRITE_JPEG_QUALITY, JPEG_QUALITY])
            if not ok:
                continue
            yield (b"--frame\r\nContent-Type: image/jpeg\r\n\r\n" + buf.tobytes() + b"\r\n")
            time.sleep(0.01)
    return Response(gen(), mimetype="multipart/x-mixed-replace; boundary=frame")

def main():
    # Ctrl+C(SIGINT), 종료(SIGTERM) 모두를 안전 종료로 연결
    signal.signal(signal.SIGINT, stop)
    signal.signal(signal.SIGTERM, stop)

    t = threading.Thread(target=camera_loop, daemon=True)
    t.start()
    try:
        # reloader 끄기: 중복 프로세스 방지(launch와 함께 쓰면 필수)
        app.run(host="0.0.0.0", port=PORT, threaded=True, use_reloader=False)
    finally:
        stop()
        t.join(timeout=1.0)

if __name__ == "__main__":
    main()
