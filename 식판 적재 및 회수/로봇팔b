import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32, Bool
import time

from pymycobot.mycobot280 import MyCobot280

class RobotB1Node(Node):
    def __init__(self):
        super().__init__('robot_b1_node')

        # JetCobot 연결
        self.mc = MyCobot280('/dev/ttyJETCOBOT', 1000000)
        self.mc.thread_lock = True
        self.get_logger().info("🤖 JetCobot B 연결 완료")

        # 초기 자세
        self.mc.send_angles([0, 0, 0, 0, 0, 0], 30)
        self.mc.set_gripper_value(100, 30)
        time.sleep(2)
        self.get_logger().info("🔄 준비 자세 완료")

        # 토픽 설정
        self.done_pub = self.create_publisher(Bool, '/b_1_done', 10)
        self.create_subscription(Int32, '/robot_b_1_node', self.step_callback, 10)

        # 타이머 등록
        self.create_timer(0.1, self.publish_done_if_needed)     # 완료 신호 반복 발행
        self.create_timer(2.0, self.check_step_timeout)         # step 재실행 타이머

        # 상태 변수
        self.step_done = False
        self.executing_step = None
        self.last_step_time = None

        # 수행할 동작 정의
        self.action_map = {
            102: [0, 0, -150, 60, -60, 45, 100],
            103: [0, 0, -150, 60, -20, 45, 0],
            104: [0, 0, -40, -45, -20, 45, 0],
            105: [0, -55, -47, 11, -20, 45, 0],
            106: [0, -55, -47, 11, -20, 45, 100],
            107: [0, 0, -40, -45, 0, 45, 0],
            108: [0, 0, -150, 60, -60, 45, 100],
            109: [0, 0, -150, 60, -20, 45, 0],
            110: [0, 0, -40, -45, -20, 45, 0],
            111: [0, -47, -48, 8, -20, 45, 100],
            112: [0, 0, 0, 0, 0, 45, 100],


         
            201: [0, 0, 0, 0, 0, 45, 100],         # 초기 자세
            202: [0, -47, -48, 8, -60, 45, 100],   # 식판1 위치 접근
            203: [0, -47, -48, 8, -20, 45, 0],     # 식판1 집기 (그리퍼 닫기)
            204: [0, 0, -40, -45, -20, 45, 100],     # 들기 및 이동
            205: [90, 0, 0, 0, 0, 45, 100],         # 버리기 및 초기화

            208: [0, -55, -47, 11, -60, 45, 100],  # 식판2 위치 접근
            209: [0, -55, -47, 11, -20, 45, 0],    # 식판2 집기
            210: [0, 0, -40, -45, -20, 45, 100],     # 들기 및 이동
            211: [90, 0, 0, 0, 0, 45, 100],        # 버리기 및 초기화


        }

    def step_callback(self, msg):
        step = msg.data
        if step == self.executing_step:
            # 동일한 step 재수신 → 무시
            return

        self.executing_step = step
        self.last_step_time = time.time()

        if step in self.action_map:
            angles = self.action_map[step]
            self.get_logger().info(f"▶️ [B-1] Step {step} 동작 실행: {angles}")
            try:
                self.mc.send_angles(angles[:6], 30)
                self.mc.set_gripper_value(angles[6], 30)
                time.sleep(2)
                self.get_logger().info(f"✅ [B-1] Step {step} 완료")
                self.step_done = True
            except Exception as e:
                self.get_logger().error(f"❌ Step {step} 실패: {e}")
        else:
            self.get_logger().warn(f"⚠️ Step {step}은 B가 수행할 수 없음")
            self.step_done = True

    def publish_done_if_needed(self):
        if self.step_done:
            self.done_pub.publish(Bool(data=True))
            self.get_logger().info("📤 완료 신호 전송 (/b_1_done)")
            self.step_done = False
            self.executing_step = None
            self.last_step_time = None

    def check_step_timeout(self):
        if self.executing_step is not None and self.last_step_time is not None:
            elapsed = time.time() - self.last_step_time
            if elapsed > 5.0:
                self.get_logger().warn(f"⏱️ Step {self.executing_step} 타임아웃 → 재실행 시도")
                self.step_callback(Int32(data=self.executing_step))  # 강제 재실행

def main(args=None):
    rclpy.init(args=args)
    node = RobotB1Node()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
