import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32, Bool
import time

class CoordinatorNode(Node):
    def __init__(self):
        super().__init__('coordinator_node')
        
        self.ready_a = False
        self.create_subscription(Bool, '/a_1_ready', self.cb_ready_a, 10)

        self.current_index = 0
        self.current_scenario = []
        self.mode_selected = False
        self.a_done = False
        self.b_done = False

        self.create_subscription(Bool, '/a_1_done', self.cb_a_done, 10)
        self.create_subscription(Bool, '/b_1_done', self.cb_b_done, 10)
        
        self.pub_a = self.create_publisher(Int32, '/robot_a_1_node', 10)
        self.pub_b = self.create_publisher(Int32, '/robot_b_1_node', 10)

        self.timer = self.create_timer(0.1, self.loop)
        self.resend_timer = self.create_timer(2.0, self.check_timeout)

        self.last_sent_time = None
        self.last_sent_step = None

        self.get_logger().info('üß† Ï§ëÏïô Ï†úÏñ¥ ÎÖ∏Îìú ÏãúÏûë')

        self.select_mode()

    def cb_ready_a(self, msg):
        self.get_logger().info(f"üõ∞Ô∏è /a_1_ready ÏàòÏã†Îê®: {msg.data}")
        if msg.data and not self.ready_a:
            self.ready_a = True
            self.get_logger().info("üì∂ A Ï§ÄÎπÑ ÏôÑÎ£å ÏàòÏã† (/a_1_ready)")

            if self.current_index == 0 and self.current_scenario:
                step, to_a, to_b = self.current_scenario[0]
                self.get_logger().info("üì§ Ï§ÄÎπÑ ÏôÑÎ£å ‚Üí step 0 Ïû¨Î∞úÌñâ")
                self.send_step(step, to_a, to_b)



    def cb_a_done(self, msg):
        if msg.data:
            self.a_done = True
            self.get_logger().info("‚úÖ A ÏôÑÎ£å ÏàòÏã† (/a_1_done)")

    def cb_b_done(self, msg):
        if msg.data:
            self.b_done = True
            self.get_logger().info("‚úÖ B ÏôÑÎ£å ÏàòÏã† (/b_1_done)")

    def select_mode(self):
        print("\n[Í∏∞Îä• ÏÑ†ÌÉù]")
        print("1: ÏãùÌåê Ï†ÅÏû¨")
        print("2: ÏãùÌåê ÌöåÏàò")
        while True:
            mode = input("Í∏∞Îä• Î≤àÌò∏ ÏûÖÎ†• (1 ÎòêÎäî 2): ").strip()
            if mode == '1':
                self.current_scenario = [
                    (101, True, False),
                    (102, True, True),
                    (103, True, True),
                    (104, True, True),
                    (105, True, True),
                    (106, True, True),
                    (107, True, True),
                    (108, True, True),
                    (109, True, True),
                    (110, True, True),
                    (111, True, True),
                    (112, True, True),
                ]
                self.mode_selected = True
                print("‚úÖ Í∏∞Îä• 1: ÏãùÌåê Ï†ÅÏû¨ ÏÑ†ÌÉùÎê®\n")
                break
            elif mode == '2':
                self.current_scenario = [
                    (201, True, True),
                    (202, True, True),
                    (203, True, True),
                    (204, True, True),
                    (205, True, True),
                    (206, True, False),
                    (207, True, False),
                    (208, True, True),
                    (209, True, True),
                    (210, True, True),
                    (211, True, True),
                    (212, True, False),
                    (213, True, False),
                ]
                self.mode_selected = True
                print("‚úÖ Í∏∞Îä• 2: ÏãùÌåê ÌöåÏàò ÏÑ†ÌÉùÎê®\n")
                break
            else:
                print("‚ùå ÏûòÎ™ªÎêú ÏûÖÎ†•ÏûÖÎãàÎã§. 1 ÎòêÎäî 2Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.")

    def loop(self):
        if not self.mode_selected:
            return

        if self.current_index >= len(self.current_scenario):
            print("\nüéâ ÏãúÎÇòÎ¶¨Ïò§ ÏôÑÎ£å!")
            again = input("üîÅ Îã§Ïãú ÏãúÏûëÌï†ÍπåÏöî? (y/n): ").strip().lower()
            if again == 'y':
                self.current_index = 0
                self.a_done = False
                self.b_done = False
                self.last_sent_step = None
                self.ready_a = False
                return
            else:
                print("üëã Ï¢ÖÎ£åÌï©ÎãàÎã§.")
                rclpy.shutdown()
                return

        if self.current_index == 0 and not self.ready_a:
            self.get_logger().info("‚è≥ Î°úÎ¥á A Ï§ÄÎπÑ ÎåÄÍ∏∞ Ï§ë...")
            return

        step, to_a, to_b = self.current_scenario[self.current_index]

        # ÏàòÌñâ ÎåÄÏÉÅÏù¥ ÏïÑÎãàÎ©¥ ÏôÑÎ£åÎêú Í≤ÉÏúºÎ°ú Í∞ÑÏ£º
        if not to_a:
            self.a_done = True
        if not to_b:
            self.b_done = True

        # A ÎòêÎäî BÍ∞Ä ÏôÑÎ£åÎêòÏßÄ ÏïäÏïòÎã§Î©¥ step Ïã†Ìò∏ Ïû¨Ï†ÑÏÜ°
        if not self.a_done or not self.b_done:
            self.send_step(step, to_a, to_b)
            return

        # AÏôÄ BÍ∞Ä Î™®Îëê ÏôÑÎ£å ‚Üí Îã§Ïùå stepÏúºÎ°ú
        self.current_index += 1
        self.a_done = False
        self.b_done = False
        self.last_sent_step = None


    def send_step(self, step, to_a, to_b):
        step_suffix = f"{step % 100:02}"
        self.get_logger().info(f"üì§ Step {step_suffix} Ï†ÑÏÜ° (A: {to_a}, B: {to_b})")
        if to_a:
            self.pub_a.publish(Int32(data=step))
        if to_b:
            self.pub_b.publish(Int32(data=step))
        self.last_sent_step = step
        self.last_sent_time = time.time()

    def check_timeout(self):
        if self.last_sent_step is not None and self.last_sent_time is not None:
            elapsed = time.time() - self.last_sent_time
            if elapsed > 2.0 and not (self.a_done and self.b_done):
                step, to_a, to_b = self.current_scenario[self.current_index]
                self.get_logger().warn(f"‚è±Ô∏è Step {step} Îã§Ïãú Ï†ÑÏÜ° (A: {to_a}, B: {to_b})")
                self.send_step(step, to_a, to_b)


def main(args=None):
    rclpy.init(args=args)
    node = CoordinatorNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
